APPNAME = 'threebody'

top = '.'
out = 'results'

from waflib import TaskGen
from waflib.Task import Task,always_run

def options(ctx):
  ctx.add_option('--with-madgraph',dest = 'madgraph', action='store', default=None, help='madgraph location')
  ctx.add_option('--with-pythia',dest = 'pythia', action='store', default=None, help='pythia location')
  ctx.add_option('--with-hepmc',dest = 'hepmc', action='store', default=None, help='pythia location')
  ctx.add_option('--with-inkscape',dest = 'inkscape', action='store', default=None, help='inkscape')
  ctx.add_option('--with-mcviz',dest = 'mcviz', action='store', default=None, help='mcviz')
  ctx.add_option('--with-rivet',dest = 'rivet', action='store', default=None, help='rivet')

def path_and_bin(pth):
  return [pth,pth+'/bin'] if pth is not None else []

def configure(ctx):
  print('â†’ configuring the project in ' + ctx.path.abspath())
  ctx.find_program('jj2.py', var='JJ2')
  ctx.find_program('mg5', var='MADGRAPH', path_list=path_and_bin(ctx.options.madgraph))
  ctx.find_program('pythia8-config', var='PYTHIA', path_list=path_and_bin(ctx.options.pythia))
  ctx.find_program('rivet', var='RIVET', path_list=path_and_bin(ctx.options.rivet))
  ctx.find_program('rivet-mkhtml', var='RIVETMKHTML', path_list=path_and_bin(ctx.options.rivet))
  ctx.find_program('rivet-buildplugin', var='RIVETBLD', path_list=path_and_bin(ctx.options.rivet))
  ctx.find_program('mcviz', var='MCVIZ', path_list=path_and_bin(ctx.options.mcviz))
  ctx.find_program('inkscape', var='INKSCAPE', path_list=path_and_bin(ctx.options.inkscape),mandatory=False)

def test(ctx):
  print ctx.path.ant_glob('madgraphcards/*.dat')

def build(ctx):
  ctx(rule='''
        ${JJ2} ${SRC[0].abspath()} -v PROC=${SRC[2].abspath()} -v PARAM=${SRC[1].abspath()} > mg5.cmd
        ${MADGRAPH} -f mg5.cmd
      ''',
      source=['mg5steering.tplt','madgraph/param_card_squark3body.dat','madgraph/proc_card_mg5_squark.dat'],
      target='madgraphrun/Events/output/events.lhe.gz',
      name = 'madgraph')

  ctx(rule='gunzip -c ${SRC} > ${TGT}',
      source='madgraphrun/Events/output/events.lhe.gz',
      target='madgraphrun/Events/output/events.lhe')

  ctx(rule='ln ${SRC} ${TGT}',
      source='madgraphrun/Events/output/events.lhe',
      target='madgraphrun/Events/output/events.lhe._0001.evts')

  ctx(rule='tar --directory `dirname ${SRC[0].abspath()}` -cvzf ${TGT[0].abspath()} ${SRC[0]}',
      source='madgraphrun/Events/output/events.lhe._0001.evts',
      target='madgraphrun/Events/output/events.lhe._0001.tar.gz')

  ctx(rule='tar --directory `dirname ${SRC[0].abspath()}` -cvzf ${TGT[0].abspath()} ${SRC[0]}',
      source='madgraphrun/Events/output/events.lhe._0001.evts',
      target='madgraphrun/Events/output/events.lhe._0001.tar.gz')

  ctx(rule='''
            mkdir -p evgenrun && \
            cd evgenrun && \
            JOBOPTSEARCHPATH=/cvmfs/atlas.cern.ch/repo/sw/Generators/MC12JobOptions/latest/common:$JOBOPTSEARCHPATH \
            Generate_tf.py --randomSeed 1234 --runNumber 10003 --ecmEnergy 14000 --maxEvents 2 \
            --jobConfig ${SRC[0].abspath()} --firstEvent 0 --inputGeneratorFile ${SRC[1].abspath()} \
            --outputEVNTFile ${TGT[0].abspath()}
           ''',
      source='jobopts/evgenJO.py madgraphrun/Events/output/events.lhe._0001.tar.gz',
      target='evgenrun/evgen.pool.root')

  ctx(rule='''
            mkdir -p simrun && \
            cd simrun && \
	    AtlasG4_trf.py inputEvgenFile=${SRC[0].abspath()} outputHitsFile=${TGT[0].abspath()} maxEvents=1 skipEvents=0 randomSeed=1234 geometryVersion=ATLAS-GEO-16-00-00 conditionsTag=OFLCOND-SDR-BS7T-04-00 2>&1 | tee g4.log
           ''',
      source='evgenrun/evgen.pool.root',
      target='simrun/g4hits.pool.root')

  ctx(rule='''
            mkdir -p digirun && \
            cd digirun && \
	    Digi_trf.py inputHitsFile=${SRC[0].abspath()} outputRDOFile=${TGT[0].abspath()} maxEvents=1 skipEvents=0 geometryVersion=ATLAS-GEO-16-00-00  conditionsTag=OFLCOND-SDR-BS7T-04-00 2>&1 | tee log           ''',
      source='simrun/g4hits.pool.root',
      target='digirun/g4digi.pool.root')

  ctx(rule='''
            mkdir -p recorun && \
            cd recorun && \
	    Reco_trf.py  inputRDOFile=${SRC[0].abspath()} outputAODFile=${TGT[0].abspath()}  2>&1 | tee reco.log
	   ''',
      source='digirun/g4digi.pool.root',
      target='recorun/aod.pool.root')

  ctx(rule='''
      c++ -O2 -ansi -pedantic -W -Wall -Wshadow -m64 -Wno-shadow `${PYTHIA} --cxxflags` \
		  ${SRC} -o ${TGT} \
		  `${PYTHIA} --libs --hepmc|sed 's|\-lhepmcinterface||'` \
      -lpythia8tohepmc \
      -L`${PYTHIA} --libdir`/archive 
      ''',
      source = ['pythia/pythiarun.cxx'],
      target = 'pythiarun/pythiarun')

  ctx(rule='''
      ${JJ2} ${SRC[1].abspath()} -v NEVTS=100 -v LHEF=${SRC[2].abspath()} > pythiasteering.cmnd 
      PYTHIA8DATA=`${PYTHIA} --xmldoc` ${SRC[0].abspath()} pythiasteering.cmnd ${TGT}''',
      source = ['pythiarun/pythiarun','pythiasteering.tplt','madgraphrun/Events/output/events.lhe'],
      target = 'pythiarun/output.hepmc',
      name = 'pythia')

  ctx(rule='${MCVIZ} --demo ${SRC} --output_file ${TGT}',
      source='pythiarun/output.hepmc',
      target = 'mcviz.svg')

  ctx(rule='${INKSCAPE} $ --export-pdf ${TGT} ${SRC}',
      source='mcviz.svg',
      target = 'mcviz-uncropped.pdf')

  ctx(rule='pdfcrop ${SRC} ${TGT}',
      source='mcviz-uncropped.pdf',
      target = 'mcviz.pdf',
      name = 'viz')

  ctx(rule='rivet-buildplugin ${TGT} ${SRC}',
      source='rivet/RivetStops.cxx',
      target = 'rivetanalysis/RivetStops.so')

  ctx(rule='''rivet ${SRC[1].abspath()} -a StopThreeBody --analysis-path=rivetanalysis --histo-file=${TGT[0].abspath()}''',
      source=['rivetanalysis/RivetStops.so','pythiarun/output.hepmc'],
      target = 'rivetanalysis/Rivet.yoda',
      name = 'rivet')

  ctx(rule='''rivet-mkhtml -c ${SRC[1].abspath()} -o rivetanalysis/plots ${SRC[0].abspath()}''',
      source=['rivetanalysis/Rivet.yoda','rivet/RivetStops.plot'],
      target = 'rivetanalysis/plots/index.html',
      name = 'plots')





import os
from waflib import Utils
from waflib.TaskGen import before_method, feature

@feature('*')
@before_method('process_source', 'process_rule')
def post_other_task_generators_if_necessary(self):
	if not self.bld.targets:
		return

	if not getattr(self, 'source', None):
		return

	group = self.bld.get_group(self.bld.get_group_idx(self))
	for x in Utils.to_list(self.source):
		y = os.path.split(x)[1]

		for tg in group:
			if id(tg) == id(self):
				continue

			if getattr(tg, 'target', None):
				pass

			for target in Utils.to_list(tg.target):
				y2 = os.path.split(target)[1]

				if y == y2:
					tg.post()
