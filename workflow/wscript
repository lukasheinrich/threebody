APPNAME = 'threebody'

top = '.'
out = 'results'

from waflib import TaskGen
from waflib.Task import Task,always_run

def options(ctx):
  ctx.add_option('-m','--with-madgraph',dest = 'madgraph', action='store', default=None, help='madgraph location')
  ctx.add_option('-p','--with-pythia',dest = 'pythia', action='store', default=None, help='pythia location')
  ctx.add_option('-e','--with-hepmc',dest = 'hepmc', action='store', default=None, help='pythia location')

def configure(ctx):
  print('â†’ configuring the project in ' + ctx.path.abspath())
  ctx.find_program('mcviz', var='MCVIZ')
  ctx.find_program('inkscape', var='INKSCAPE')
  ctx.env.PYTHIA = ctx.options.pythia #use pythia-config somehow
  ctx.env.HEPMC =  ctx.options.hepmc #use pythia-config somehow
  ctx.env.MADGRAPH = ctx.options.madgraph + '/bin/mg5'

def test(ctx):
  print ctx.path.ant_glob('madgraphcards/*.dat')

def build(ctx):
  ctx(rule='''
        mkdir -p madgraphcards
        cp ${SRC[1].abspath()} ${SRC[2].abspath()} madgraphcards
        ${MADGRAPH} -f ${SRC[0].abspath()}
      ''',
      source=['mg5steering.cmd','madgraph/param_card_squark3body.dat','madgraph/proc_card_mg5_squark.dat'],
      target='madgraphrun/Events/run_01/events.lhe.gz',
      name = 'madgraph')

  ctx(rule='gunzip -c ${SRC} > ${TGT}',
      source='madgraphrun/Events/run_01/events.lhe.gz',
      target='madgraphrun/Events/run_01/events.lhe')

  ctx(rule='''
      c++ -O2 -ansi -pedantic -W -Wall -Wshadow -m64 -Wno-shadow -I${PYTHIA}/include -I${HEPMC}/include \
		  ${SRC} -o ${TGT} \
		  -L${PYTHIA}/lib/archive -lpythia8 -llhapdfdummy -lpythia8tohepmc \
		  -L${HEPMC}/lib -lHepMC
      ''',
      source = ['pythia/pythiarun.cxx'],
      target = 'pythia/pythiarun')

  ctx(rule='PYTHIA8DATA=${PYTHIA}/xmldoc ${SRC[0].abspath()} ${SRC[1].abspath()} ${TGT}',
      source = ['pythia/pythiarun','pythiasteering.cmnd','madgraphrun/Events/run_01/events.lhe'],
      target = 'pythiarun/output.hepmc',
      name = 'pythia')

  ctx(rule='${MCVIZ} --demo ${SRC}',
      source='pythiarun/output.hepmc',
      target = 'mcviz.svg')

  ctx(rule='${INKSCAPE} $ --export-pdf ${TGT} ${SRC}',
      source='mcviz.svg',
      target = 'mcviz-uncropped.pdf')

  ctx(rule='pdfcrop ${SRC} ${TGT}',
      source='mcviz-uncropped.pdf',
      target = 'mcviz.pdf',
      name = 'viz')

  ctx(rule='rivet-buildplugin ${TGT} ${SRC}',
      source='rivet/RivetStops.cxx',
      target = 'rivetanalysis/RivetStops.so')

  ctx(rule='''rivet ${SRC[1].abspath()} -a StopThreeBody --analysis-path=rivetanalysis --histo-file=${TGT}''',
      source=['rivetanalysis/RivetStops.so','pythiarun/output.hepmc'],
      target = 'rivetanalysis/Rivet.yoda',
      name = 'rivet')

  ctx(rule='''rivet-mkhtml -c ${SRC[1].abspath()} ${SRC[0].abspath()} -o rivetanalysis/plots''',
      source=['rivetanalysis/Rivet.yoda','rivet/RivetStops.plot'],
      target = 'rivetanalysis/plots/index.html',
      name = 'plots')





